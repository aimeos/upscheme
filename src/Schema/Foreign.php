<?php

/**
 * @license LGPLv3, https://opensource.org/licenses/LGPL-3.0
 * @copyright Aimeos (aimeos.org), 2021
 */


namespace Aimeos\Upscheme\Schema;

use Doctrine\DBAL\Schema\Table as DbalTable;


/**
 * Foreign schema class
 */
class Foreign
{
	static private $methods = [];

	private $table;
	private $dbaltable;
	private $localcol;
	private $fktable;
	private $fkcol;
	private $name;
	private $opts;


	/**
	 * Initializes the foreign key object
	 *
	 * @param Aimeos\Upscheme\Schema\Table $table Table schema object
	 * @param \Doctrine\DBAL\Schema\Table $table Doctrine table object
	 * @param array $localcol List of columns from the current table spawning the foreign key constraint
	 * @param string $fktable Name of the referenced table
	 * @param array $localcol List of columns from the referenced table spawning the foreign key constraint
	 * @param string|null $name Name of the foreign key constraint and index or NULL for autogenerated name
	 */
	public function __construct( Table $table, DbalTable $dbaltable, array $localcol, string $fktable, array $fkcol, string $name = null )
	{
		$this->table = $table;
		$this->dbaltable = $dbaltable;
		$this->localcol = $localcol;
		$this->fktable = $fktable;
		$this->fkcol = $fkcol;
		$this->name = $name;
		$this->opts = [
			'onDelete' => 'CASCADE',
			'onUpdate' => 'CASCADE',
		];

		if( !$table->hasIndex( $name ) ) {
			$table->index( $localcol, $name );
		}

		if( !$table->hasForeign( $name ) ) {
			$dbaltable->addForeignKeyConstraint( $fktable, (array) $localcol, (array) $fkcol, $this->opts, $name );
		}
	}


	/**
	 * Calls custom methods or passes unknown method calls to the Doctrine table object
	 *
	 * @param string $method Name of the method
	 * @param array $args Method parameters
	 * @return mixed Return value of the called method
	 */
	public function __call( string $method, array $args )
	{
		if( isset( self::$methods[$method] ) ) {
			return call_user_func_array( static::$methods[$method]->bindTo( $this, static::class ), $args );
		}

		return $this->sequence->{$method}( ...$args );
	}


	/**
	 * Returns the value for the given sequence option
	 *
	 * @param string $name Sequence option name
	 * @return mixed Sequence option value
	 */
	public function __get( string $name )
	{
		return $this->{$name}();
	}


	/**
	 * Sets the new value for the given sequence option
	 *
	 * @param string $name Sequence option name
	 * @param mixed Sequence option value
	 */
	public function __set( string $name, $value )
	{
		$this->{$name}( $value );
	}


	/**
	 * Registers or overwrites a custom method
	 *
	 * @param string $name Custom method name
	 * @param \Closure $fcn Anonymous function with custom parameters and return value
	 */
	public static function method( string $name, \Closure $fcn )
	{
		self::$methods[$name] = $fcn;
	}


	/**
	 * Sets the name of the constraint or returns the current name
	 *
	 * @param string|null $value New name of the constraint or NULL to return current value
	 * @return self|string Same object for setting the name, current name without parameter
	 */
	public function name( string $value = null )
	{
		if( $value === null ) {
			return $this->name;
		}

		if( $this->name !== $value ) {
			$this->replace( $this->name, $value );
		}

		return $this;
	}


	/**
	 * Sets the action if the referenced row is deleted or returns the current value
	 *
	 * Available actions are:
	 * - CASCADE : Delete referenced value
	 * - NO ACTION : No change in referenced value
	 * - RESTRICT : Forbid changing values
	 * - SET NULL : Set referenced value to NULL
	 *
	 * @param string|null $value Performed action or NULL to return current value
	 * @return self|string Same object for setting the value, current value without parameter
	 */
	public function onDelete( string $value = null )
	{
		if( $value === null ) {
			return $this->opts['onDelete'] ?? null;
		}

		$this->opts['onDelete'] = $value;
		return $this->replace( $this->name );
	}


	/**
	 * Sets the action if the referenced row is updated or returns the current value
	 *
	 * Available actions are:
	 * - CASCADE : Update referenced value
	 * - NO ACTION : No change in referenced value
	 * - RESTRICT : Forbid changing values
	 * - SET NULL : Set referenced value to NULL
	 *
	 * @param string|null $value Performed action or NULL to return current value
	 * @return self|string Same object for setting the value, current value without parameter
	 */
	public function onUpdate( string $value = null )
	{
		if( $value === null ) {
			return $this->opts['onUpdate'] ?? null;
		}

		$this->opts['onUpdate'] = (string) $value;
		return $this->replace( $this->name );
	}


	/**
	 * Applies the changes to the database schema
	 *
	 * @return self Same object for fluid method calls
	 */
	public function up() : self
	{
		$this->table->up();
		return $this;
	}


	/**
	 * Deletes the current constraint and creates a new one
	 *
	 * @param string $name Name of the existing constraint
	 * @param string|null $newname Name of the new constraint or same name if NULL
	 * @return self Same object for fluid method calls
	 */
	protected function replace( string $name, string $newname = null ) : self
	{
		$this->dbaltable->removeForeignKey( $name );
		$this->dbaltable->addForeignKeyConstraint( $this->fktable, $this->localcol, $this->fkcol, $this->opts, $newname ?: $name );

		$this->name = $newname ?: $name;
		return $this;
	}
}